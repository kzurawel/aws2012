Date: Sun, 01 Nov 2009 17:21:31 +0000
Categories: articles
Tags: compass,compiler,css,framework,less,php,rosemary,ruby,sass,scaffold
dsq_thread_id: 421778379
Permalink: http://arborwebsolutions.com/2009/11/css-frameworks-and-compilers-the-new-breed/
Summary: Why you might want to add an extra step to your CSS work.

# CSS Frameworks and Compilers: The New Breed

A year ago, if someone mentioned "CSS Frameworks," three contenders
would likely come to mind: [Blueprint][], [YUI][], and [960.gs][]. These
"frameworks" were basically custom stylesheets that let you add
pre-defined classes into your HTML markup to arrange things in a grid
and spiffy up your typography. Were they helpful? Definitely. 

At the
same time, designers new to the web were able to latch onto these
frameworks and avoid any real understanding of CSS. Experienced
designers could use these frameworks as a jumping-off point for more
complicated styling, but that still left a lot of work - equivalent to
including a "reset" stylesheet and then styling from scratch. 

Recently,
however, a new breed of CSS frameworks have been gaining in popularity.
These are not pre-made stylesheets like the frameworks of yore; instead,
they might be more properly called **CSS compilers**. They're new
domain-specific languages that let you write more expressive
stylesheets, run them through a compiler or filter, and end up with
standard CSS files.

### Great, why would I do that?

I asked the same question when I first read about them. I mean, I
already know CSS well, I can get it to do whatever I want - why should I
bother learning an entirely new set of conventions if I'm going to end
up with what I can already do myself? There are two answers. One,
knowing a CSS compiler's language will let you **write your CSS code
much faster**. We'll look at how exactly they do that in a bit. Two,
**they make maintenance much, much easier**. If you've ever spent time
around software developers, you'll commonly hear that bug-fixing and
maintenance of code takes far more time than actually writing the code
the first time around. The same goes for website markup. 

If you're
making a site for your Aunt Tilly and it's four pages of static HTML,
then no, you probably don't need to use these tools. But if you're
making a very large site with some very complicated styling, your CSS is
going to take up pages and pages, and the CSS specification doesn't give
you any real help with organizing all those style declarations. Sure,
there are best practices, but even those can only take you so far before
your only hope of finding anything is your text editor's search
function.

### So how does it work?

Now we get to the meat and potatoes of it. CSS compilers vary in the
features they offer, but there are definite overlaps that make them
worthwhile:

1.  Variables,
2.  Nesting,
3.  Functions / Mix-ins,
4.  (in some systems) Loops / control flow.

In the examples that follow, I'll be using Sass, just because it's the
system I'm most familiar with. Sass uses Ruby as its underlying
compiler; feed it Sass script, and it churns out a CSS file. Sass can
even do that in reverse - feed it a CSS file, and get back a Sass file.
That means you can even use Sass for the complicated stylesheets you
made years ago. 

**Variables** How many times have you made a stylesheet
and put a "color cheat sheet" as a comment at the top?

    :::css
    /*
      Red Underline: #B21212
      Blue Underline: #0971B2
      Light green (header): #E8EAEB
    */

Sure, it's a handy reference, but it doesn't actually do anything to
help you with your markup. You might be using the same color seven times
in a stylesheet, but you have to manually type it in every time and make
sure that every time you actually typed the right color hex code. And if
you want to change that color later, you have to make sure you track
down every usage of that color in the stylesheet. 

That's why all CSS
compilers have variables. In Sass, it might look like this (note that
Sass drops the curly braces around style declarations and semicolons
after each element, and uses indentation and newlines instead):

    !red_underline = #B21212

    #main div
        border-bottom: 1px #{!red_underline} solid

Every time you want to use that red color, just put in `!red_underline`
and you're done. Make one change - where `!red_underline` is declared -
and you've just changed the color everywhere. 

You can use variables for
more than just colors, too. You can store measurements (`!content_width
= 800px`) or strings of text (`!wrapper_display = "block"`). Variables
alone are a great reason to start using a CSS compiler. 

**Nesting** Ah,
the bane of CSS development. Say you want to style a "main" div, the
"content" div within it, the paragraph elements within, and links within
those paragraphs, with their own hover states. With plain CSS, you have
to do something like this:

    :::css
    div#main { width: 800px; }
    div#main div#content { width:760px; margin: 0 auto; }
    div#main div#content p { font-size: 1.2em; }
    div#main div#content p a { color: blue; }
    div#main div#content p a:hover { color: red; }

As you can see, that's a lot of repeated typing. Plus, these five
declarations are not connected to each other in any real, meaningful way
- you could put one at the start of the stylesheet, a few in the middle,
and one at the end, and they would work exactly the same, except it
would take you a lot longer to find all the declarations that deal with
some part of `#main`. 

CSS compilers to the rescue! With any compiler, you
can perform nesting of declarations, making them a single logical unit
in your markup and saving you a lot of redundant typing. Here's the
above example in Sass:

    div#main
        width: 800px

        div#content
            width: 760px
            margin: 0 auto

            p
                font-size: 1.2em

                a
                    color: blue

                    &:hover
                        color: red

Notice that we didn't even have to repeat the "a" to define hover styles
- the "&" references "the thing one level above this." Now, the entire
`#main` div's styling is one block. You no longer have to fret about
where in your stylesheet to place a new rule; start at the top-level
item and work your way down level by level. 

Granted, nesting is purely
optional - if you want a very specific selector but you don't want to
put it inside an existing nested definition, you could always add a
separate declaration (in the above example, you could have a rule for
`div#main div#content ul` that sits outside the nested `div#main`
declaration). 

**Functions & Mix-ins** These solve another gripe of CSS
designers. Say you want to make rounded corners using those spiffy new
CSS3 properties. It's simpler than ever before to do this:

    :::css
    .rounded {
        -moz-border-radius: 5px;
        -webkit-border-radius: 5px;
        border-radius: 5px;
    }

Whenever you want to make something rounded in your design, you just add
the `.rounded` class. But what if different elements in your design have
different roundednesses? (Please excuse my neologism there.) You could,
if you wanted, make multiple classes; `.rounded5` for 5px, `.rounded10` for
10px, etc. Or, you could make what Sass calls a "mix-in":

    =rounded
        -moz-border-radius: 5px
        -webkit-border-radius: 5px
        border-radius: 5px

    thing-to-round
        +rounded
        background-color: !bg_color

Make a mix-in with =, use a mix-in with +. It's pretty simple, but so
far it doesn't do anything different from CSS classes. Well, did I
mention that you can turn a mix-in into a function? Check this one out:

    =rounded(!radius)
        -moz-border-radius = !radius
        -webkit-border-radius = !radius
        border-radius = !radius

    thing-to-round
        +rounded(5px)
        background-color = !bg_color

That is the true power of mix-ins. Write your markup once in a mix-in,
and call it anywhere in the stylesheet with any value you want. You can
even call mix-ins within other mix-ins:

    =my_complicated_mixin(!color)
        +fancy_text(!color)
        +header_background
        width: 40em

    div#something
        +my_complicated_mixin(#B21212)

See? Mix-ins and functions can make your life a lot simpler. 

**Looping
and flow control** One last tidbit before we look at CSS compiler
options. Sass in particular lets you use common control-flow operators
in your stylesheet - `@if`, `@for`, and `@while`. These probably aren't going
to be used much, but when combined with variables, you can do some
interesting things:

    !in_production = false

    body
        @if not !in_production
            color: red
            border: 1px red solid

Here, if we're still in development, all the text will be in red, and
block elements will have a red border. Change the `!in_production`
variable to "true" when you're ready to launch, re-compile the
stylesheet, and you're good to go.

### So what are my options?

There are a number of CSS compilers available today, and it seems like a
new one pops up with every passing month. Some try to be more CSS-like
in their syntax; some integrate with other systems; some are just
personal projects. Generally, though, each compiler will support some
form of variables, nesting, and mix-ins.

-   [**Sass**][]. Sass is built on Ruby, and you can install it as part
    of the "haml" gem. You'll get the "sass" command-line program, as
    well as "css2sass" for converting in the opposite direction.
-   [**Compass**][]. Compass is built on top of Sass, but with a more
    CSS-like syntax. It adds support for integrating Blueprint and
    960.gs into your Sass files as pre-built mix-ins, as well as
    allowing setups like Merb or Sinatra to compile Sass sheets
    on-the-fly.
-   [**Scaffold**][]. Scaffold is PHP-based, and lives on the server.
    When a user requests a stylesheet, Scaffold serves up a cached
    version if available, or compiles it on-the-fly and then caches it.
    Scaffold's syntax is very similar to Compass.
-   [**Rosemary**][]. Another PHP-based system. This one is going to be
    interesting to watch - it allows you to define "filters" that modify
    your CSS on the server. You might, for example, have an "Internet
    Explorer" filter that only fires if the user's browser is detected
    as IE, or filters that style a site differently based on where in
    the world a user is.
-   [**Less**][]. Less is Ruby-based and kind of a mixture between Sass
    and Compass in terms of syntax. It integrates very well with Ruby on
    Rails.

Well, there you have it. Have you made any interesting projects with CSS
compilers lately? Do you think they allow you to be more creative, or
are they just a waste of time? Let us know in the comments!

  [Blueprint]: http://www.blueprintcss.org/
  [YUI]: http://developer.yahoo.com/yui/
  [960.gs]: http://960.gs/
  [**Sass**]: http://sass-lang.com/
  [**Compass**]: http://wiki.github.com/chriseppstein/compass
  [**Scaffold**]: http://wiki.github.com/anthonyshort/csscaffold
  [**Rosemary**]: http://www.bigspaceship.com/blog/labs/a-dash-of-rosemary-on-your-css/
  [**Less**]: http://lesscss.org/
